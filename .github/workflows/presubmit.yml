name: Presubmit
on: [push, pull_request]

jobs:
  pre_job:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          concurrent_skipping: 'same_content'
          skip_after_successful_duplicate: 'true'
          paths_ignore: '["**/README.md"]'
          do_not_skip: '["pull_request"]'

  build-and-check:
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    name: Build and Check ${{ matrix.os }} ${{ matrix.compiler }}${{ matrix.threadsafe && ' Thread Safe' || '' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        threadsafe: [true, false]
        compiler: [gcc, g++, clang]
        exclude:
          - os: macos-latest
            compiler: g++

    steps:
      - uses: actions/checkout@v3
      - run: sudo apt update; sudo apt install -y ${{ matrix.compiler }} ruby-dev libgsl-dev python3-dev valgrind
        if: ${{ matrix.os == 'ubuntu-latest' }}
      - run: brew install gsl automake
        if: ${{ matrix.os == 'macos-latest' }}
      - run: gem install --user-install rake ffi ffi-value whittle
      - run: pip3 install --user parglare==0.12.0
      - run: ./autogen.sh
      - run: mkdir -p build
      - run: ../configure --enable-strict${{ matrix.threadsafe && ' --enable-thread-safe' || '' }} CC=${{ matrix.compiler }}${{ (matrix.compiler == 'clang' && matrix.os == 'ubuntu-latest') && ' CFLAGS="-gdwarf-4 -O2"' || '' }}
        working-directory: build
      - run: make -j
        working-directory: build
      - run: make -j check
        working-directory: build
      - run: make -j check-valgrind-memcheck
        working-directory: build
        if: ${{ matrix.os == 'ubuntu-latest' }}
      - run: make -j check-valgrind-helgrind
        working-directory: build
        if: ${{ matrix.os == 'ubuntu-latest' }}
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: build-and-check
          path: |
            build/**/*.log
            build/config.log

  distcheck:
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    name: Distcheck ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - uses: actions/checkout@v3
      - run: sudo apt update; sudo apt install -y gcc ruby-dev libgsl-dev python3-dev
        if: ${{ matrix.os == 'ubuntu-latest' }}
      - run: brew install gsl automake
        if: ${{ matrix.os == 'macos-latest' }}
      - run: gem install --user-install rake ffi ffi-value whittle
      - run: pip3 install --user parglare==0.12.0
      - run: ./autogen.sh
      - run: mkdir -p build
      - run: ../configure --enable-strict
        working-directory: build
      - run: make -j distcheck
        working-directory: build

  dist-check:
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    name: Dist and Check ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - uses: actions/checkout@v3
      - run: sudo apt update; sudo apt install -y gcc ruby-dev libgsl-dev python3-dev
        if: ${{ matrix.os == 'ubuntu-latest' }}
      - run: brew install gsl automake
        if: ${{ matrix.os == 'macos-latest' }}
      - run: gem install --user-install rake ffi ffi-value whittle
      - run: pip3 install --user parglare==0.12.0
      - run: ./autogen.sh
      - run: mkdir -p build
      - run: ../configure --enable-strict
        working-directory: build
      - run: make dist
        working-directory: build
      - name: extract
        run: tar -xzvf cconfigspace-*
        working-directory: build
      - name: configure
        run: |
          cd `find . -type d -name "cconfigspace-*"`
          mkdir -p build
          cd build
          ../configure
        working-directory: build
      - name: make check
        run: |
          cd `find . -type d -name "cconfigspace-*"`
          cd build
          make -j check
        working-directory: build
