name: Presubmit
on: [push, pull_request]

jobs:
  pre_job:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          concurrent_skipping: 'same_content'
          skip_after_successful_duplicate: 'true'
          paths_ignore: '["**/README.md"]'
          do_not_skip: '["pull_request"]'

  build-and-check:
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    name: Build and Check ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - uses: actions/checkout@v3
      - run: sudo apt update; sudo apt install -y gcc ruby-dev libgsl-dev python3-dev
        if: ${{ matrix.os == 'ubuntu-latest' }}
      - run: brew install gsl automake
        if: ${{ matrix.os == 'macos-latest' }}
      - run: gem install --user-install rake ffi ffi-value whittle
      - run: pip3 install --user parglare==0.12.0
      - run: ./autogen.sh
      - run: mkdir -p build
      - run: ../configure --enable-strict
        working-directory: build
      - run: make
        working-directory: build
      - run: make check
        working-directory: build
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: build-and-check
          path: |
            build/tests/test_mixture_distribution.log
            build/tests/test_user_defined_tuner.log
            build/tests/test_random_features_tuner.log
            build/tests/test_random_tuner.log
            build/tests/test_categorical_hyperparameter.log
            build/tests/test_condition.log
            build/tests/test_configuration_space.log
            build/tests/test_uniform_distribution.log
            build/tests/test_features_space.log
            build/tests/test_roulette_distribution.log
            build/tests/test_interval.log
            build/tests/test-suite-memcheck.log
            build/tests/test_ordinal_hyperparameter.log
            build/tests/test_forbidden.log
            build/tests/test_numerical_hyperparameter.log
            build/tests/test_discrete_hyperparameter.log
            build/tests/test_normal_distribution.log
            build/tests/test_tree.log
            build/tests/test_user_defined_features_tuner.log
            build/tests/test-suite.log
            build/tests/test_multivariate_distribution.log
            build/tests/test_expression.log
            build/tests/test_rng.log
            build/config.log
            build/samples/test_python.log
            build/samples/test-suite.log
            build/samples/test_ruby.log

  build-and-check-cxx:
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    name: Build and Check C++ ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v3
      - run: sudo apt-get update
      - run: sudo apt-get install -y gcc g++ ruby-dev libgsl-dev python3-dev
      - run: gem install --user-install rake ffi ffi-value whittle
      - run: pip3 install --user parglare==0.12.0
      - run: ./autogen.sh
      - run: mkdir -p build
      - run: ../configure --enable-strict CC=g++
        working-directory: build
      - run: make
        working-directory: build
      - run: make check
        working-directory: build
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: build-and-check
          path: |
            build/tests/test_mixture_distribution.log
            build/tests/test_user_defined_tuner.log
            build/tests/test_random_features_tuner.log
            build/tests/test_random_tuner.log
            build/tests/test_categorical_hyperparameter.log
            build/tests/test_condition.log
            build/tests/test_configuration_space.log
            build/tests/test_uniform_distribution.log
            build/tests/test_features_space.log
            build/tests/test_roulette_distribution.log
            build/tests/test_interval.log
            build/tests/test-suite-memcheck.log
            build/tests/test_ordinal_hyperparameter.log
            build/tests/test_forbidden.log
            build/tests/test_numerical_hyperparameter.log
            build/tests/test_discrete_hyperparameter.log
            build/tests/test_normal_distribution.log
            build/tests/test_tree.log
            build/tests/test_user_defined_features_tuner.log
            build/tests/test-suite.log
            build/tests/test_multivariate_distribution.log
            build/tests/test_expression.log
            build/tests/test_rng.log
            build/config.log
            build/samples/test_python.log
            build/samples/test-suite.log
            build/samples/test_ruby.log

  build-and-check-clang:
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    name: Build and Check clang ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v3
      - run: sudo apt-get update
      - run: sudo apt-get install -y clang ruby-dev libgsl-dev python3-dev
      - run: gem install --user-install rake ffi ffi-value whittle
      - run: pip3 install --user parglare==0.12.0
      - run: ./autogen.sh
      - run: mkdir -p build
      - run: ../configure CC=clang
        working-directory: build
      - run: make
        working-directory: build
      - run: make check
        working-directory: build
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: build-and-check
          path: |
            build/tests/test_mixture_distribution.log
            build/tests/test_user_defined_tuner.log
            build/tests/test_random_features_tuner.log
            build/tests/test_random_tuner.log
            build/tests/test_categorical_hyperparameter.log
            build/tests/test_condition.log
            build/tests/test_configuration_space.log
            build/tests/test_uniform_distribution.log
            build/tests/test_features_space.log
            build/tests/test_roulette_distribution.log
            build/tests/test_interval.log
            build/tests/test-suite-memcheck.log
            build/tests/test_ordinal_hyperparameter.log
            build/tests/test_forbidden.log
            build/tests/test_numerical_hyperparameter.log
            build/tests/test_discrete_hyperparameter.log
            build/tests/test_normal_distribution.log
            build/tests/test_tree.log
            build/tests/test_user_defined_features_tuner.log
            build/tests/test-suite.log
            build/tests/test_multivariate_distribution.log
            build/tests/test_expression.log
            build/tests/test_rng.log
            build/config.log
            build/samples/test_python.log
            build/samples/test-suite.log
            build/samples/test_ruby.log

  build-and-check-valgrind:
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    name: Build and Check Valgrind ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v3
      - run: sudo apt-get update
      - run: sudo apt-get install -y gcc valgrind ruby-dev libgsl-dev python3-dev
      - run: ./autogen.sh
      - run: mkdir -p build
      - run: ../configure --enable-strict
        working-directory: build
      - run: make
        working-directory: build
      - run: make check-valgrind
        working-directory: build
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: build-and-check-valgrind
          path: |
            build/tests/test_mixture_distribution.log
            build/tests/test_user_defined_tuner.log
            build/tests/test_random_features_tuner.log
            build/tests/test_random_tuner.log
            build/tests/test_categorical_hyperparameter.log
            build/tests/test_condition.log
            build/tests/test_configuration_space.log
            build/tests/test_uniform_distribution.log
            build/tests/test_features_space.log
            build/tests/test_roulette_distribution.log
            build/tests/test_interval.log
            build/tests/test-suite-memcheck.log
            build/tests/test_ordinal_hyperparameter.log
            build/tests/test_forbidden.log
            build/tests/test_numerical_hyperparameter.log
            build/tests/test_discrete_hyperparameter.log
            build/tests/test_normal_distribution.log
            build/tests/test_tree.log
            build/tests/test_user_defined_features_tuner.log
            build/tests/test-suite.log
            build/tests/test_multivariate_distribution.log
            build/tests/test_expression.log
            build/tests/test_rng.log
            build/config.log
            build/samples/test_python.log
            build/samples/test-suite.log
            build/samples/test_ruby.log

  distcheck:
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    name: Distcheck ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - uses: actions/checkout@v3
      - run: sudo apt update; sudo apt install -y gcc ruby-dev libgsl-dev python3-dev
        if: ${{ matrix.os == 'ubuntu-latest' }}
      - run: brew install gsl automake
        if: ${{ matrix.os == 'macos-latest' }}
      - run: gem install --user-install rake ffi ffi-value whittle
      - run: pip3 install --user parglare==0.12.0
      - run: ./autogen.sh
      - run: mkdir -p build
      - run: ../configure --enable-strict
        working-directory: build
      - run: make distcheck
        working-directory: build
